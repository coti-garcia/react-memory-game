{"version":3,"sources":["components/Header/header.js","components/Instructions/instructions.js","components/ImageCard/imageCard.js","components/Footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","class","className","text","score","topScore","Instructions","ImageCard","src","alt","onClick","clickCard","id","Footer","App","state","begin","guess","currentId","cards","shuffle","array","sort","Math","random","scoreFeedback","newScore","console","log","newCards","setState","this","map","element","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4lCAuBeA,MApBf,SAAgBC,GACd,OACE,4BAAQC,MAAM,UACZ,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SAASF,EAAMG,MAC9B,yBAAKD,UAAU,SACb,yBAAKA,UAAU,SACb,0CADF,IAC2BF,EAAMI,MAC/B,mCACA,8CACCJ,EAAMK,e,MCGNC,MAdf,WACE,OACE,yBAAKJ,UAAU,gBACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,+BACA,uBAAGA,UAAU,QAAb,+E,aCQOK,MAbf,SAAmBP,GACjB,OACE,yBAAKE,UAAU,mBACb,yBACEM,IAAKR,EAAMQ,IACXC,IAAKT,EAAMS,IACXP,UAAU,gBACVQ,QAAS,kBAAMV,EAAMW,UAAUX,EAAMY,S,MCC9BC,MARf,WACE,OACE,4BAAQX,UAAU,UAChB,4CC2FSY,E,2MAxFbC,MAAQ,CACNC,OAAO,EACPZ,MAAO,EACPC,SAAU,EACVY,OAAO,EACPC,UAAW,EACXC,MAAOA,G,EAGTC,QAAU,SAAAC,GAER,OADAA,EAAMC,KAAK,kBAAMC,KAAKC,SAAW,KAC1BH,G,EAGTI,cAAgB,WAWd,OATI,EAAKV,MAAMC,MACT,EAAKD,MAAME,MACN,yBAEA,2BAGF,4B,EAKXN,UAAY,SAAAC,GACV,IAAIc,EAAW,EAAKX,MAAMX,MAAQ,EAClCuB,QAAQC,IAAI,eAAiBhB,GAC7Be,QAAQC,IAAI,cAAgB,EAAKb,MAAMG,WACvC,IAAIW,EAAW,EAAKT,QAAQD,GAC5B,EAAKW,SAAS,CACZd,OAAO,EACPE,UAAWN,EACXO,MAAOU,IAGL,EAAKd,MAAMG,YAAcN,EAC3B,EAAKkB,SAAS,CACZ1B,MAAOsB,EACPT,OAAO,IAGL,EAAKF,MAAMX,MAAQ,EAAKW,MAAMV,SAChC,EAAKyB,SAAS,CACZzB,SAAU,EAAKU,MAAMX,MACrBa,OAAO,EACPb,MAAO,IAGT,EAAK0B,SAAS,CACZb,OAAO,EACPb,MAAO,K,wEAML,IAAD,OACP,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,CACEC,KAAM4B,KAAKN,gBACXrB,MAAO2B,KAAKhB,MAAMX,MAClBC,SAAU0B,KAAKhB,MAAMV,WAEvB,kBAAC,EAAD,MACA,yBAAKH,UAAU,aACb,yBAAKA,UAAU,OACZ6B,KAAKhB,MAAMI,MAAMa,IAAI,SAAAC,GAAO,OAC3B,kBAAC,EAAD,CACErB,GAAIqB,EAAQrB,GACZsB,IAAKD,EAAQrB,GACbJ,IAAKyB,EAAQzB,IACbC,IAAKwB,EAAQxB,IACbE,UAAW,EAAKA,gBAKxB,kBAAC,EAAD,W,GAnFUwB,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.26a594a6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./header.scss\";\n\nfunction Header(props) {\n  return (\n    <header class=\"Header\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-6\">{props.text}</div>\n          <div className=\"col-6\">\n            <div className=\"score\">\n              <strong>Score:</strong> {props.score}\n              <span>|</span>\n              <strong>Top Score:</strong>\n              {props.topScore}\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./instructions.scss\";\n\nfunction Instructions() {\n  return (\n    <div className=\"Instructions\">\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4\">Most Delicious Memory Game!</h1>\n        <p className=\"lead\">\n          Click on an image to earn points, but don't click on any more than\n          once!\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Instructions;\n","import React from \"react\";\nimport \"./imageCard.scss\";\n\nfunction ImageCard(props) {\n  return (\n    <div className=\"col-3 ImageCard\">\n      <img\n        src={props.src}\n        alt={props.alt}\n        className=\"img-thumbnail\"\n        onClick={() => props.clickCard(props.id)}\n      />\n    </div>\n  );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./footer.scss\";\n\nfunction Footer() {\n  return (\n    <footer className=\"Footer\">\n      <p>Memory Game</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/header\";\nimport Instructions from \"./components/Instructions/instructions\";\nimport cards from \"./cards.json\";\nimport ImageCard from \"./components/ImageCard/imageCard\";\nimport Footer from \"./components/Footer/footer\";\n\nclass App extends React.Component {\n  state = {\n    begin: false,\n    score: 0,\n    topScore: 0,\n    guess: false,\n    currentId: 0,\n    cards: cards\n  };\n\n  shuffle = array => {\n    array.sort(() => Math.random() - 0.5);\n    return array;\n  };\n\n  scoreFeedback = () => {\n    let text;\n    if (this.state.begin) {\n      if (this.state.guess) {\n        text = \"You guessed correctly!\";\n      } else {\n        text = \"You guessed incorrectly!\";\n      }\n    } else {\n      text = \"Click an image to begin!\";\n    }\n    return text;\n  };\n\n  clickCard = id => {\n    let newScore = this.state.score + 1;\n    console.log(\"Clicked ID: \" + id);\n    console.log(\"Current ID:\" + this.state.currentId);\n    let newCards = this.shuffle(cards);\n    this.setState({\n      begin: true,\n      currentId: id,\n      cards: newCards\n    });\n\n    if (this.state.currentId !== id) {\n      this.setState({\n        score: newScore,\n        guess: true\n      });\n    } else {\n      if (this.state.score > this.state.topScore) {\n        this.setState({\n          topScore: this.state.score,\n          guess: false,\n          score: 0\n        });\n      } else {\n        this.setState({\n          guess: false,\n          score: 0\n        });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          text={this.scoreFeedback()}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Instructions />\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.cards.map(element => (\n              <ImageCard\n                id={element.id}\n                key={element.id}\n                src={element.src}\n                alt={element.alt}\n                clickCard={this.clickCard}\n              />\n            ))}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}